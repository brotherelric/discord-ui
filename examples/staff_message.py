# Example by 404kuso
# https://github.com/discord-py-ui/discord-ui/tree/main/examples/staff_messagee.py
# 
#       This example will use a slashcommand and a choice generator that will generaete choices
#       based on a role that was selected. This command will send a message with a content that
#       was passed in an option to a user from a staff role.
#
# Note: Replace 785567635802816595 in `guild_ids=[785567635802816595]` with a guild_id of your choice
#       where you want the command to be available

# region imports
import discord
from discord.ext import commands
from discord_ui import UI, SlashOption, AutocompleteInteraction
# endregion

# initalize bot with intents for the `fetch_members` function
bot = commands.Bot(" ", intents=discord.Intents(members=True))
# initalize ui instnace
ui = UI(bot)

# Function to generate the choices
async def staff_generartor(ctx: AutocompleteInteraction):
    # get the value of the previous selected 'staff' option
    role: discord.Role = ctx.selected_options["staff"]
    # get all members that have that role
    members = role.guild.fetch_members().filter(predicate=lambda x: x.get_role(role.id))
    # return a choice with the name and the id as the value for every user
    return [(x.name, str(x.id)) async for x in members]

# slash command for sending messages to "staff"
@ui.slash.command(options=[
    # user has to select a staff role for which the choices will be generated 
    SlashOption(discord.Role, "staff", required=True),
    # A autogenerated option for the 
    SlashOption(str, "user", required=True, choice_generator=staff_generartor), 
    # A message that will be send to the user
    SlashOption(str, "message", required=True)
    # guilds where the command is available
], guild_ids=[785567635802816595])
# the callback function
async def send_to_staff(ctx, staff: discord.Role, user: str, message: str):
    # defer the interaction in case we'll need longer than 3 seconds to respond
    await ctx.defer()
    # get the target user by the passed 'user' argument that will contain the target user id
    target_user = (await ctx.guild.fetch_members().find(lambda x: x.id == int(user)))
    # send a message to the target user with the content of the 'message' argument
    await target_user.send("**" + str(ctx.author) + "**```\n" + message + "```")
    # send a hidden response to the coommand that a message was sent
    await ctx.send("send message to " + target_user, hidden=True)

# login into the bot. Replace "token_here" with your token
bot.run("token_here")